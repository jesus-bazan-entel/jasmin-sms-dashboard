{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from\"react\";import{useNavigate}from\"react-router-dom\";import{useSnackbar}from\"notistack\";// Estado inicial\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,token:null,isAuthenticated:false,loading:true,error:null};// Tipos de acciones\nconst AUTH_ACTIONS={LOGIN_START:\"LOGIN_START\",LOGIN_SUCCESS:\"LOGIN_SUCCESS\",LOGIN_FAILURE:\"LOGIN_FAILURE\",LOGOUT:\"LOGOUT\",REGISTER_START:\"REGISTER_START\",REGISTER_SUCCESS:\"REGISTER_SUCCESS\",REGISTER_FAILURE:\"REGISTER_FAILURE\",UPDATE_USER:\"UPDATE_USER\",CLEAR_ERROR:\"CLEAR_ERROR\",SET_LOADING:\"SET_LOADING\"};// Reducer\nconst authReducer=(state,action)=>{switch(action.type){case AUTH_ACTIONS.LOGIN_START:case AUTH_ACTIONS.REGISTER_START:return{...state,loading:true,error:null};case AUTH_ACTIONS.LOGIN_SUCCESS:return{...state,user:action.payload.user,token:action.payload.token,isAuthenticated:true,loading:false,error:null};case AUTH_ACTIONS.REGISTER_SUCCESS:return{...state,user:action.payload.user,token:action.payload.token,isAuthenticated:true,loading:false,error:null};case AUTH_ACTIONS.LOGIN_FAILURE:case AUTH_ACTIONS.REGISTER_FAILURE:return{...state,user:null,token:null,isAuthenticated:false,loading:false,error:action.payload};case AUTH_ACTIONS.LOGOUT:return{...state,user:null,token:null,isAuthenticated:false,loading:false,error:null};case AUTH_ACTIONS.UPDATE_USER:return{...state,user:{...state.user,...action.payload}};case AUTH_ACTIONS.CLEAR_ERROR:return{...state,error:null};case AUTH_ACTIONS.SET_LOADING:return{...state,loading:action.payload};default:return state;}};// Contexto\nconst AuthContext=/*#__PURE__*/createContext();// Hook personalizado\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth debe ser usado dentro de AuthProvider\");}return context;};// Provider\nexport const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);const{enqueueSnackbar}=useSnackbar();const navigate=useNavigate();// API Base URL\nconst API_BASE_URL=process.env.REACT_APP_API_URL||\"http://localhost:8000/api\";// Función para hacer peticiones HTTP\nconst apiRequest=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=`${API_BASE_URL}${endpoint}`;const config={headers:{\"Content-Type\":\"application/json\",...options.headers},...options};// Agregar token si está disponible\nif(state.token){config.headers.Authorization=`Bearer ${state.token}`;}try{const response=await fetch(url,config);const data=await response.json();if(!response.ok){throw new Error(data.detail||data.message||\"Error en la petición\");}return data;}catch(error){console.error(\"API Request Error:\",error);throw error;}};// Función de login\nconst login=async credentials=>{dispatch({type:AUTH_ACTIONS.LOGIN_START});try{const formData=new FormData();formData.append(\"username\",credentials.email);formData.append(\"password\",credentials.password);const response=await fetch(`${API_BASE_URL}/auth/login`,{method:\"POST\",body:formData});const data=await response.json();if(!response.ok){throw new Error(data.detail||\"Error al iniciar sesión\");}// Guardar token en localStorage\nlocalStorage.setItem(\"token\",data.access_token);localStorage.setItem(\"user\",JSON.stringify(data.user));dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{user:data.user,token:data.access_token}});enqueueSnackbar(\"Sesión iniciada correctamente\",{variant:\"success\"});navigate(\"/dashboard\");return data;}catch(error){dispatch({type:AUTH_ACTIONS.LOGIN_FAILURE,payload:error.message});enqueueSnackbar(error.message,{variant:\"error\"});throw error;}};// Función de registro\nconst register=async userData=>{dispatch({type:AUTH_ACTIONS.REGISTER_START});try{const data=await apiRequest(\"/auth/register\",{method:\"POST\",body:JSON.stringify(userData)});// Guardar token en localStorage\nlocalStorage.setItem(\"token\",data.access_token);localStorage.setItem(\"user\",JSON.stringify(data.user));dispatch({type:AUTH_ACTIONS.REGISTER_SUCCESS,payload:{user:data.user,token:data.access_token}});enqueueSnackbar(\"Cuenta creada correctamente\",{variant:\"success\"});navigate(\"/dashboard\");return data;}catch(error){dispatch({type:AUTH_ACTIONS.REGISTER_FAILURE,payload:error.message});enqueueSnackbar(error.message,{variant:\"error\"});throw error;}};// Función de logout\nconst logout=async()=>{try{// Intentar hacer logout en el servidor\nif(state.token){await apiRequest(\"/auth/logout\",{method:\"POST\"});}}catch(error){console.error(\"Error al hacer logout en el servidor:\",error);}finally{// Limpiar localStorage\nlocalStorage.removeItem(\"token\");localStorage.removeItem(\"user\");dispatch({type:AUTH_ACTIONS.LOGOUT});enqueueSnackbar(\"Sesión cerrada\",{variant:\"info\"});navigate(\"/login\");}};// Función para actualizar perfil\nconst updateProfile=async profileData=>{try{const data=await apiRequest(\"/auth/profile\",{method:\"PUT\",body:JSON.stringify(profileData)});dispatch({type:AUTH_ACTIONS.UPDATE_USER,payload:data});// Actualizar localStorage\nlocalStorage.setItem(\"user\",JSON.stringify(data));enqueueSnackbar(\"Perfil actualizado correctamente\",{variant:\"success\"});return data;}catch(error){enqueueSnackbar(error.message,{variant:\"error\"});throw error;}};// Función para cambiar contraseña\nconst changePassword=async passwordData=>{try{await apiRequest(\"/auth/change-password\",{method:\"POST\",body:JSON.stringify(passwordData)});enqueueSnackbar(\"Contraseña cambiada correctamente\",{variant:\"success\"});}catch(error){enqueueSnackbar(error.message,{variant:\"error\"});throw error;}};// Función para recuperar contraseña\nconst forgotPassword=async email=>{try{await apiRequest(\"/auth/forgot-password\",{method:\"POST\",body:JSON.stringify({email})});enqueueSnackbar(\"Instrucciones enviadas a tu email\",{variant:\"success\"});}catch(error){enqueueSnackbar(error.message,{variant:\"error\"});throw error;}};// Función para verificar token\nconst verifyToken=async token=>{try{const response=await fetch(`${API_BASE_URL}/auth/verify-token`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Authorization:`Bearer ${token}`}});if(!response.ok){throw new Error(\"Token inválido\");}const data=await response.json();return data;}catch(error){console.error(\"Error verificando token:\",error);return null;}};// Función para refrescar token\nconst refreshToken=async()=>{try{const data=await apiRequest(\"/auth/refresh\",{method:\"POST\"});localStorage.setItem(\"token\",data.access_token);dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{user:state.user,token:data.access_token}});return data.access_token;}catch(error){console.error(\"Error refrescando token:\",error);logout();return null;}};// Limpiar error\nconst clearError=()=>{dispatch({type:AUTH_ACTIONS.CLEAR_ERROR});};// Verificar autenticación al cargar\nuseEffect(()=>{const initAuth=async()=>{const token=localStorage.getItem(\"token\");const userData=localStorage.getItem(\"user\");if(token&&userData){try{const user=JSON.parse(userData);const isValid=await verifyToken(token);if(isValid){dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{user,token}});}else{// Token inválido, limpiar localStorage\nlocalStorage.removeItem(\"token\");localStorage.removeItem(\"user\");dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:false});}}catch(error){console.error(\"Error inicializando auth:\",error);localStorage.removeItem(\"token\");localStorage.removeItem(\"user\");dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:false});}}else{dispatch({type:AUTH_ACTIONS.SET_LOADING,payload:false});}};initAuth();},[]);// Configurar interceptor para refrescar token automáticamente\nuseEffect(()=>{if(state.token){const interval=setInterval(()=>{refreshToken();},15*60*1000);// Refrescar cada 15 minutos\nreturn()=>clearInterval(interval);}},[state.token]);const value={...state,login,register,logout,updateProfile,changePassword,forgotPassword,refreshToken,clearError,apiRequest};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthContext;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}